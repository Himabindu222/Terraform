### main.tf

##################################################################################
# PROVIDERS
##################################################################################

provider "aws" {
  access_key = var.aws_access_key
  secret_key = var.aws_secret_key
  region     = var.aws_region
}


### instances.tf
data "aws_ssm_parameter" "amzn2_linux" {
  name = "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
}

##################################################################################
# RESOURCES
##################################################################################

# INSTANCES #
resource "aws_instance" "web-app-1" {
  ami                    = nonsensitive(data.aws_ssm_parameter.amzn2_linux.value)
  instance_type          = var.instance_type
  count                  = 2
  tags = {
    Name = "HelloWorld ${count.index}"
  }
}

### s3.tf
resource "aws_s3_bucket" "s3_bucket" {
  bucket = "bucketlist" 
}
### backend.tf
terraform {
  backend "s3" {
    bucket         = "bucketlist" 
    key            = "Hima/terraform.tfstate"   #folder-name/ prefix
    region         = "us-east-1"
    encrypt        = true
    dynamodb_table = "terraform-lock"
  }
}



### variables.tf
variable "aws_access_key" {
  type        = string
  description = "AWS access key"
  sensitive   = true
}
variable "aws_secret_key" {
  type        = string
  description = "AWS secret key"
  sensitive   = true
}
variable "instance_type" {
  type        = string
  description = "type of instance"
  default     = "t2.micro"
}
variable "aws_region" {
  type        = string
  description = "type of instance"
  default     = "t2.micro"
}


### securitygroup.tf
resource "aws_security_group" "app-sg" {
  name        = "security"
  description = "sg for helloworld instance"
  //vpc_id      = aws_vpc.main.id
  tags = {
    Name = "sg-instance"
  }
}

resource "aws_vpc_security_group_ingress_rule" "example" {
  security_group_id = aws_security_group.app-sg.id
  cidr_ipv4   = "10.0.0.0/8"
  from_port   = 80
  ip_protocol = "tcp"
  to_port     = 80
}


### output.tf
output "instance_public_ip" {
  description = "Public IP address of the EC2 instance"
  //value       = aws_instance.web-app[0].public_ip
  value       = aws_instance.web-app.public_ip
}

### dynamodb.tf
resource "aws_dynamodb_table" "terraform_lock" {
  name           = "terraform-lock"
  billing_mode   = "PAY_PER_REQUEST"  #billing type
  hash_key       = "LockID"

  attribute {
    name = "LockID"
    type = "S"   # type of key = string
  }
}




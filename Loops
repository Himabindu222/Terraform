#### count.tf

provider "aws" {
   region     = "eu-central-1"
}
resource "aws_instance" "ec2_example" {

   ami           = "ami-0767046d1677be5a0"
   instance_type =  "t2.micro"
   count = 1

   tags = {
           Name = "Terraform EC2"
   }

}

resource "aws_iam_user" "example" {
  count = length(var.user_names)
  name  = var.user_names[count.index]
}
#------------------ list ---------------------
variable "user_names" {
  description = "IAM usernames"
  type        = list(string)
  default     = ["user1", "user2", "user3"]
}



#-------------------- set ------------------

#Step 1: Create a set
variable "my_set" {
   type    = set(string)
   default = ["value1", "value2", "value3"]
}

#Step 2: Convert set to list   
#you can not use the count meta argument directly over the set, first you need to convert the set to the list.
locals {
   my_list = tolist(var.my_set)
}

#Step 3: Use count to iterate
resource "my_resource" "example" {
   count = length(local.my_list)

   name = local.my_list[count.index]
   # Additional resource configuration...
}





#--------------- map ---------------
#Ideally the count meta-argument are not meant for iterating over map or set but there are some alternates by 
#which you can iterate over the map using the count meta-argument.

#Step 1: Create a map variable
variable "my_map" {
  type = map(string)
  default = {
    key1 = "value1"
    key2 = "value2"
    key3 = "value3"
  }
}

#Step 2: Fetch keys of map
locals {
  my_keys = keys(var.my_map)
}

#Step 3: iterate over map using keys and count.index meta argument
resource "my_resource" "example" {
  count = length(local.my_keys)

  name  = local.my_keys[count.index]
  value = var.my_map[local.my_keys[count.index]]
  # Additional resource configuration...
}


#### for_each.tf
#for_each does not support list as it contains duplicates. sowe castlist to set
#Step 1: Create a list varible
variable "my_list" {
   type    = list(string)
   default = ["value1", "value2", "value3"]
}

resource "my_resource" "example" {
   
   #Step 2: Convert list to set using toset() function 
   for_each = toset(var.my_list)

   #Step 3: Iterate over the list
   name = each.value
   # Additional resource configuration...
}







#--------- set ---------------

resource "aws_iam_user" "example" {
  for_each = var.user_names
  name  = each.value
}

variable "user_names" {
  description = "IAM usernames"
  type        = set(string)
  default     = ["user1", "user2", "user3"]
}

# ---------- map ---------------

#Step 1: Create a map 
variable "my_map" {
  type = map(string)
  default = {
    key1 = "value1"
    key2 = "value2"
    key3 = "value3"
  }
}

#Step 2: Iterate over the map using for_each
resource "my_resource" "example" {
  for_each = var.my_map

  name  = each.key
  value = each.value
  # Additional resource configuration...
}


#### for.tf
